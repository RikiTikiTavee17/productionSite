// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.29.3
// source: dish.proto

package dish_v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DishV1Client is the client API for DishV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DishV1Client interface {
	Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
	Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CreatePerson(ctx context.Context, in *CreatePersonReqest, opts ...grpc.CallOption) (*CreatePersonResponse, error)
	LogInPerson(ctx context.Context, in *LogInPersonRequest, opts ...grpc.CallOption) (*LogInPersonResponce, error)
	ChangePersonPosition(ctx context.Context, in *ChangePersonPositionRequest, opts ...grpc.CallOption) (*ChangePersonPositionResponse, error)
}

type dishV1Client struct {
	cc grpc.ClientConnInterface
}

func NewDishV1Client(cc grpc.ClientConnInterface) DishV1Client {
	return &dishV1Client{cc}
}

func (c *dishV1Client) Create(ctx context.Context, in *CreateRequest, opts ...grpc.CallOption) (*CreateResponse, error) {
	out := new(CreateResponse)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishV1Client) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishV1Client) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishV1Client) Update(ctx context.Context, in *UpdateRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishV1Client) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishV1Client) CreatePerson(ctx context.Context, in *CreatePersonReqest, opts ...grpc.CallOption) (*CreatePersonResponse, error) {
	out := new(CreatePersonResponse)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/CreatePerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishV1Client) LogInPerson(ctx context.Context, in *LogInPersonRequest, opts ...grpc.CallOption) (*LogInPersonResponce, error) {
	out := new(LogInPersonResponce)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/LogInPerson", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dishV1Client) ChangePersonPosition(ctx context.Context, in *ChangePersonPositionRequest, opts ...grpc.CallOption) (*ChangePersonPositionResponse, error) {
	out := new(ChangePersonPositionResponse)
	err := c.cc.Invoke(ctx, "/dish_v1.DishV1/ChangePersonPosition", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DishV1Server is the server API for DishV1 service.
// All implementations must embed UnimplementedDishV1Server
// for forward compatibility
type DishV1Server interface {
	Create(context.Context, *CreateRequest) (*CreateResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	List(context.Context, *ListRequest) (*ListResponse, error)
	Update(context.Context, *UpdateRequest) (*emptypb.Empty, error)
	Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error)
	CreatePerson(context.Context, *CreatePersonReqest) (*CreatePersonResponse, error)
	LogInPerson(context.Context, *LogInPersonRequest) (*LogInPersonResponce, error)
	ChangePersonPosition(context.Context, *ChangePersonPositionRequest) (*ChangePersonPositionResponse, error)
	mustEmbedUnimplementedDishV1Server()
}

// UnimplementedDishV1Server must be embedded to have forward compatible implementations.
type UnimplementedDishV1Server struct {
}

func (UnimplementedDishV1Server) Create(context.Context, *CreateRequest) (*CreateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedDishV1Server) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedDishV1Server) List(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedDishV1Server) Update(context.Context, *UpdateRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedDishV1Server) Delete(context.Context, *DeleteRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedDishV1Server) CreatePerson(context.Context, *CreatePersonReqest) (*CreatePersonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePerson not implemented")
}
func (UnimplementedDishV1Server) LogInPerson(context.Context, *LogInPersonRequest) (*LogInPersonResponce, error) {
	return nil, status.Errorf(codes.Unimplemented, "method LogInPerson not implemented")
}
func (UnimplementedDishV1Server) ChangePersonPosition(context.Context, *ChangePersonPositionRequest) (*ChangePersonPositionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePersonPosition not implemented")
}
func (UnimplementedDishV1Server) mustEmbedUnimplementedDishV1Server() {}

// UnsafeDishV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DishV1Server will
// result in compilation errors.
type UnsafeDishV1Server interface {
	mustEmbedUnimplementedDishV1Server()
}

func RegisterDishV1Server(s grpc.ServiceRegistrar, srv DishV1Server) {
	s.RegisterService(&DishV1_ServiceDesc, srv)
}

func _DishV1_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).Create(ctx, req.(*CreateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishV1_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishV1_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).List(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishV1_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).Update(ctx, req.(*UpdateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishV1_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishV1_CreatePerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePersonReqest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).CreatePerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/CreatePerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).CreatePerson(ctx, req.(*CreatePersonReqest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishV1_LogInPerson_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogInPersonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).LogInPerson(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/LogInPerson",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).LogInPerson(ctx, req.(*LogInPersonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DishV1_ChangePersonPosition_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePersonPositionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DishV1Server).ChangePersonPosition(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dish_v1.DishV1/ChangePersonPosition",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DishV1Server).ChangePersonPosition(ctx, req.(*ChangePersonPositionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DishV1_ServiceDesc is the grpc.ServiceDesc for DishV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DishV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dish_v1.DishV1",
	HandlerType: (*DishV1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Create",
			Handler:    _DishV1_Create_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _DishV1_Get_Handler,
		},
		{
			MethodName: "List",
			Handler:    _DishV1_List_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _DishV1_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _DishV1_Delete_Handler,
		},
		{
			MethodName: "CreatePerson",
			Handler:    _DishV1_CreatePerson_Handler,
		},
		{
			MethodName: "LogInPerson",
			Handler:    _DishV1_LogInPerson_Handler,
		},
		{
			MethodName: "ChangePersonPosition",
			Handler:    _DishV1_ChangePersonPosition_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dish.proto",
}
